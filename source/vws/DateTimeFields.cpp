/*
 * Copyright (C) 2025 Bruce Beisel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "DateTimeFields.h"

#include <iomanip>
#include "Weather.h"

using namespace std;

namespace vws {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields() :  year(INVALID_YEAR), month(1), monthDay(1), hour(0), minute(0), second(0) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields(const DateTimeFields & rhs) :  year(rhs.year),
                                                              month(rhs.month),
                                                              monthDay(rhs.monthDay),
                                                              hour(rhs.hour),
                                                              minute(rhs.minute),
                                                              second(rhs.second) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields(const std::string & dateTimeString) {
    resetDateTimeFields();
    parseDateTime(dateTimeString);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields(int year, int month, int mday) {
    resetDateTimeFields();
    setDate(year, month, mday);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields(int year, int month, int day, int hour, int minutes, int seconds) {
    setDateTime(year, month, day, hour, minutes, seconds);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields(const struct tm & tm) {
    setDateTime(tm);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTimeFields::DateTimeFields(DateTime timeFromEpoch) {
    setFromEpoch(timeFromEpoch);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::resetDateTimeFields() {
    year = INVALID_YEAR;
    month = 1;
    monthDay = 1;
    hour = 0;
    minute = 0;
    second = 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setDate(int yr, int mon, int mday) {
    year = yr;
    month = mon;
    monthDay = mday;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setTime(int hr, int min, int sec) {
    hour = hr;
    minute = min;
    second = sec;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setDateTime(int year, int month, int monthDay, int hour, int minute, int second) {
    setDate(year, month, monthDay);
    setTime(hour, minute, second);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setDateTime(const DateTimeFields & other) {
    year = other.year;
    month = other.month;
    monthDay = other.monthDay;
    hour = other.hour;
    minute = other.minute;
    second = other.second;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setDateTime(const struct tm & tm) {
    year = tm.tm_year + Weather::TIME_STRUCT_YEAR_OFFSET;
    month = tm.tm_mon + 1;
    monthDay = tm.tm_mday;
    hour = tm.tm_hour;
    minute = tm.tm_min;
    second = tm.tm_sec;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::parseDate(const std::string & dateString) {
    int yr, mon, mday;

    if (sscanf(dateString.c_str(), "%d-%d-%d", &yr, &mon, &mday) != 3)
        return false;

    year = yr;
    month = mon;
    monthDay = mday;

    return true;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::parseDateTime(const std::string & dateTimeString) {
    int yr, mon, mday;
    int hr = 0;
    int min = 0;
    int sec = 0;
    char dateTimeSeparator;

    int rv = sscanf(dateTimeString.c_str(), "%d-%d-%d%1c%d:%d:%d", &yr, &mon, &mday, &dateTimeSeparator, &hr, &min, &sec);

    if (rv != 6 && rv != 7) {
        return false;
    }

    year = yr;
    month = mon;
    monthDay = mday;
    hour = hr;
    minute = min;
    second = sec;

    return true;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setYear(int year) {
    this->year = year;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setMonth(int month) {
    this->month = month;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setMonthDay(int monthDay) {
    this->monthDay = monthDay;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setHour(int hour) {
    this->hour = hour;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setMinute(int minute) {
    this->minute = minute;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setSecond(int second) {
    this->second = second;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
DateTimeFields::getYear() const {
    return year;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
DateTimeFields::getMonth() const {
    return month;
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
DateTimeFields::getMonthDay() const {
    return monthDay;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
DateTimeFields::getHour() const {
    return hour;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
DateTimeFields::getMinute() const {
    return minute;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
DateTimeFields::getSecond() const {
    return second;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::isDateTimeValid() const {
    return year != INVALID_YEAR;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
DateTime
DateTimeFields::getEpochDateTime() const {
    //
    // Note that mktime() is implemented differently on different platforms.
    // For instance on windows the time 2024-11-03 01:55:00 is converted to
    // a time that is not in DST where 2024-11-03 01:50:00 is in DST.
    // On LINUX both of these times are converted to times in DST.
    //
    struct tm tm{};
    tm.tm_year = year - Weather::TIME_STRUCT_YEAR_OFFSET;
    tm.tm_mon = month - 1;
    tm.tm_mday = monthDay;
    tm.tm_hour = hour;
    tm.tm_min = minute;
    tm.tm_sec = second;
    tm.tm_isdst = -1;
    return mktime(&tm);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
DateTimeFields::setFromEpoch(DateTime epoch) {
    struct tm tm{0};
    Weather::localtime(epoch, tm);
    year = tm.tm_year + Weather::TIME_STRUCT_YEAR_OFFSET;
    month = tm.tm_mon + 1;
    monthDay = tm.tm_mday;
    hour = tm.tm_hour;
    minute = tm.tm_min;
    second = tm.tm_sec;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
std::string
DateTimeFields::formatDate() const {
    ostringstream oss;

    oss << setw(4) << setfill('0') << year << "-" << setw(2) << month << "-" << setw(2) << monthDay;
    return oss.str();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
std::string
DateTimeFields::formatTime(bool displaySeconds) const {
    ostringstream oss;

    oss << setfill('0') << setw(2) << hour << ":" << setw(2) << minute;

    if (displaySeconds)
        oss << setfill('0') << ":" << setw(2) << second;

    return oss.str();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
std::string
DateTimeFields::formatDateTime(bool displaySeconds) const {
    ostringstream oss;

    oss << formatDate() << " " << formatTime(displaySeconds);

    return oss.str();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::operator==(const DateTimeFields & other) const {
    return year == other.year && month == other.month && monthDay == other.monthDay && hour == other.hour && minute == other.minute && second == other.second;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::operator!=(const DateTimeFields & other) const {
    return !(*this == other);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::operator<(const DateTimeFields & other) const {
    if (year < other.year)
        return true;
    else if (year > other.year)
        return false;

    if (month < other.month)
        return true;
    else if (month > other.month)
        return false;

    if (monthDay < other.monthDay)
        return true;
    else if (monthDay > other.monthDay)
        return false;

    if (hour < other.hour)
        return true;
    else if (hour > other.hour)
        return false;

    if (minute < other.minute)
        return true;
    else if (minute > other.minute)
        return false;

    return second < other.second;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::operator>(const DateTimeFields & other) const {
    return !(*this < other || *this == other);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::operator>=(const DateTimeFields & other) const {
    return *this > other || *this == other;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
DateTimeFields::operator<=(const DateTimeFields & other) const {
    return *this < other || *this == other;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
ostream &
operator<<(ostream & os, const DateTimeFields & fields) {
    os << fields.formatDateTime();

    return os;
}

}
