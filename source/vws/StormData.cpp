/*
 * Copyright (C) 2024 Bruce Beisel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "StormData.h"

namespace vws {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
StormData::StormData() : stormState(StormState::STORM_IDLE), stormRain(0) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
StormData::StormData(const DateTimeFields & start, const DateTimeFields & end, Rainfall rain) {

}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
StormData::~StormData() {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
StormData::resetStormData() {
    stormState = StormState::STORM_IDLE;
    stormRain = 0.0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
StormData::setStormStart(const DateTimeFields & stormStart, Rainfall stormRain) {
    if (!stormStart.isDateTimeValid())
        return false;

    setStormStart(stormStart, stormRain);

    return true;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
StormData::setStormStart(int year, int month, int day, Rainfall rain) {
    stormStart.setDate(year, month, day);
    stormRain = rain;
    stormState = StormState::STORM_ACTIVE;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
StormData::setStormEnd(const DateTimeFields & end) {
    if (!end.isDateTimeValid())
        return false;

    stormEnd.setDateTime(end);
    return true;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
StormData::setStormEnd(int year, int month, int day) {
    stormEnd.setDate(year, month, day);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
StormData::setStormRain(Rainfall rainfall) {
    stormRain = rainfall;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
StormData::setStormData(const DateTimeFields & start, const DateTimeFields & end, Rainfall rain) {
    if (!start.isDateTimeValid() || !end.isDateTimeValid())
        return false;

    setStormStart(start, rain);
    setStormEnd(end);
    return true;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
StormData::isStormActive() const {
    return stormState == StormState::STORM_ACTIVE;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
StormData::hasStormEnded() const {
    return stormState == StormState::STORM_ENDED;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const DateTimeFields &
StormData::getStormStart() const {
    return stormStart;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const DateTimeFields &
StormData::getStormEnd() const {
    return stormEnd;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Rainfall
StormData::getStormRain() const {
    return stormRain;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
StormData::operator<(const StormData & other) const {
    return stormStart < other.stormStart;

}
}
