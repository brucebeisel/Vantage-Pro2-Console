/* 
 * Copyright (C) 2023 Bruce Beisel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "Weather.h"
#include "WindDirectionSlice.h"

using namespace std;

namespace vws {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
WindDirectionSlice::WindDirectionSlice() : slice(0), name(""), lowHeading(0.0), sampleCount(0),
                         highHeading(0.0), last10MinuteDominantTime(0) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
WindDirectionSlice::WindDirectionSlice(int slice, const std::string & name, Heading low, Heading high) : slice(slice),
                                                                                       name(name),
                                                                                       lowHeading(low),
                                                                                       highHeading(high),
                                                                                       sampleCount(0),
                                                                                       last10MinuteDominantTime(0) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
WindDirectionSlice::~WindDirectionSlice() {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
WindDirectionSlice::setValues(int slice, const std::string & name, Heading low, Heading high) {
    this->slice = slice;
    this->name = name;
    this->lowHeading = low;
    this->highHeading = high;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
std::string
WindDirectionSlice::getName() const {
    return name;
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Heading
WindDirectionSlice::getCenter() const {
    return lowHeading + ((highHeading - lowHeading) / static_cast<Heading>(2));
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool
WindDirectionSlice::isInSlice(Heading heading) const {
    return heading > lowHeading && heading <= highHeading;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
WindDirectionSlice::addSample(DateTime time, Heading heading) {
    if (isInSlice(heading))
        sampleCount++;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
WindDirectionSlice::clearSamples() {
    sampleCount = 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int
WindDirectionSlice::getSampleCount() const {
    return sampleCount;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
WindDirectionSlice::setLast10MinuteDominantTime(time_t time) {
    last10MinuteDominantTime = time;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
time_t
WindDirectionSlice::getLast10MinuteDominantTime() const {
    return last10MinuteDominantTime;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & os, const WindDirectionSlice & slice) {
    os << "Low: " << slice.lowHeading << " High: " << slice.highHeading << " " << "Sample Count: " << slice.sampleCount;
    return os;
}
}
